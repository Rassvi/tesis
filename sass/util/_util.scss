@use 'variables' as var;
@use 'mixins' as mixin;
@use 'maps' as util;

/* PROPIEDADES */

// Generador de propiedades utiles
/* PROPIEDADES GENÉRICAS */
@each $propiedad,
$valores in util.$utilities {
  $prefijo: map-get($valores, "prefix"); // Adquiere el valor que tenga "prefix" dentro del mapa anidado.
  $sub-mapa: map-get($valores, "values"); // Toma los valores del mapa anidado y se vuele un mapa
  // Se encarga de recorrer, el mapa que adquirió la $valor

  @each $modificador,
  $valores in $sub-mapa {
    @if ($modificador =="default") {

      // Si el modificador es un valor por defecto.
      .#{$prefijo} {
        // Simplemente se le da el nombre del prefijo
        #{$propiedad}: $valores;
      }
    }

    @else {
      .#{$prefijo}--#{$modificador} {
        #{$propiedad}: $valores;
      }
    }
  }
}

/* PROPIEDADES FLEX */
// UTILIZAR NOMBRES MÁS CONCRETOS
@each $propiedad,
$valor in util.$flex {
  $prefijo: map-get($valor, "prefix");
  $sub-mapa: map-get($valor, "values");

  @each $k,
  $v in $sub-mapa {
    @if ($k =="default") {
      .#{$prefijo} {
        #{$propiedad}: $v;
      }
    }

    @else {
      .#{$prefijo}--#{$k} {
        #{$propiedad}: $v;
      }
    }
  }
}

/* PROPIEDADES de TEXTO y FUENTE */
// Genera tamaños de fuente
@each $key,
$value in util.$fuentes {
  .font-#{$key} {
    font-size: $value;
  }
}

@each $propiedad,
$valor in util.$text {
  $prefijo: map-get($valor, "prefix");
  $sub-mapa: map-get($valor, "values");

  @each $k,
  $v in $sub-mapa {
    @if ($k =="default") {
      .#{$prefijo} {
        #{$propiedad}: $v;
      }
    }

    @else {
      .#{$prefijo}--#{$k} {
        #{$propiedad}: $v;
      }
    }
  }
}


/*  */

// Similar a la anterior, pero aplicada a los bordes.

/* PROPIEDADES de BORDES */
@each $propiedad,
$valores in util.$tipos-borde {
  $sub-mapa: map-get($valores, "values");

  @each $modificador,
  $valores in $sub-mapa {

    @each $identificador,
    $color in util.$colores {
      @for $i from 1 through 2 {

        // Da el tamaño a el borde, ya que en el mixin se multiplica.
        @if ($identificador =="secondary") {

          // si el color es el secundario por "defecto"
          @if($modificador =="default") {

            // Bordes por defecto, "SOLID"
            .border--#{$i} {
              @include mixin.borders($i, $valores);
            }
          }

          @else {
            .border--#{$modificador}-#{$i} {
              // Otros estilos de bordes
              @include mixin.borders($i, $valores);
            }
          }
        }

        // si el color no es secundario, otros valores
        @else {
          @if($modificador =="default") {

            // Bordes por defecto, "SOLID"
            .border--#{$i}-#{$identificador} {
              @include mixin.borders($i, $valores, $color);
            }
          }

          @else {
            .border--#{$modificador}-#{$i}-#{$identificador} {
              // Otros estilos de bordes
              @include mixin.borders($i, $valores, $color);
            }
          }
        }

      }
    }
  }
}



// .shadow {}